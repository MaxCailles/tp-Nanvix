<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stdlib_8h" kind="file" language="C++">
    <compoundname>stdlib.h</compoundname>
    <innerclass refid="structdiv__t" prot="public">div_t</innerclass>
    <innerclass refid="structldiv__t" prot="public">ldiv_t</innerclass>
    <innerclass refid="structlldiv__t" prot="public">lldiv_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__stdlib_1gacf4a2778f9a4d5e0bf2d32c5cde485a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Exit</definition>
        <argsstring>(int)</argsstring>
        <name>_Exit</name>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Terminates the calling process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Exiting status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="134" column="13" bodyfile="lib/libc/stdlib/_Exit.c" bodystart="33" bodyend="36" declfile="include/stdlib.h" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga8dec7c95227ff149687066cf04029191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void abort</definition>
        <argsstring>(void)</argsstring>
        <name>abort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Causes abnormal process termination. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="135" column="13" bodyfile="lib/libc/stdlib/abort.c" bodystart="32" bodyend="35" declfile="include/stdlib.h" declline="135" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga2503bc813e76c9ff8b3523db10bdc06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int abs</definition>
        <argsstring>(int)</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns an integer absolute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer operand.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of its integer operand. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="136" column="12" bodyfile="lib/libc/stdlib/abs.c" bodystart="33" bodyend="36" declfile="include/stdlib.h" declline="136" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga7cb771250232f7f27f31079208f4428a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atexit</definition>
        <argsstring>(void(*)(void))</argsstring>
        <name>atexit</name>
        <param>
          <type>void(*)(void)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Registers a function to run at process termination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be registered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion 0 is returned; otherwise, a non-zero value is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="137" column="12" bodyfile="lib/libc/stdlib/atexit.c" bodystart="76" bodyend="85" declfile="include/stdlib.h" declline="137" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga3c03a473fd58b46d02952cbb6f4a83af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double atof</definition>
        <argsstring>(const char *)</argsstring>
        <name>atof</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="138" column="15" declfile="include/stdlib.h" declline="138" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga4e157d18591ba54c92e4da99a3d1ccae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atoi</definition>
        <argsstring>(const char *)</argsstring>
        <name>atoi</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value if the value can be represented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="139" column="12" bodyfile="lib/libc/stdlib/atoi.c" bodystart="35" bodyend="38" declfile="include/stdlib.h" declline="139" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gabcc2e53ab0b26e5bbf55d597af030327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long atol</definition>
        <argsstring>(const char *)</argsstring>
        <name>atol</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to a long integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value if the value can be represented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="140" column="13" bodyfile="lib/libc/stdlib/atol.c" bodystart="35" bodyend="38" declfile="include/stdlib.h" declline="140" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga4a184533926b5b5e4e595f52919df116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long atoll</definition>
        <argsstring>(const char *)</argsstring>
        <name>atoll</name>
        <param>
          <type>const char *</type>
          <declname>nptr</declname>
        </param>
        <briefdescription>
<para>Converts a string to a long long integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nptr</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value if the value can be represented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="141" column="18" bodyfile="lib/libc/stdlib/atoll.c" bodystart="35" bodyend="38" declfile="include/stdlib.h" declline="141" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga49a76993c8406bc5a389dfabb8089bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* bsearch</definition>
        <argsstring>(const void *, const void *, size_t, size_t, int(*)(const void *, const void *))</argsstring>
        <name>bsearch</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compar</declname>
        </param>
        <briefdescription>
<para>Performs a binary search on a sorted table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compar</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a matching member of the array, or a null pointer if no match is found. If two or more members compare equal, which member is returned is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="142" column="13" bodyfile="lib/libc/stdlib/bsearch.c" bodystart="75" bodyend="105" declfile="include/stdlib.h" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga77e880b1033d5a912be4333fc5d31eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* calloc</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>calloc</name>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates a chunk of memory and cleans it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each element.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion with both <linebreak/>
 and <computeroutput>size</computeroutput> non-zero, <ref refid="group__stdlib_1ga77e880b1033d5a912be4333fc5d31eef" kindref="member">calloc()</ref> returns a pointer to the allocated space. If either <computeroutput>n</computeroutput> or <computeroutput>size</computeroutput> is 0, then either a null pointer or a unique pointer value that can be successfully passed to <ref refid="group__stdlib_1gaf07d89f5ceaea0c7c8252cc41fd75f37" kindref="member">free()</ref> is returned. Otherwise, it returns a null pointer and set errno to indicate the error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="144" column="13" bodyfile="lib/libc/stdlib/calloc.c" bodystart="42" bodyend="54" declfile="include/stdlib.h" declline="144" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gad17e77a41f50034681a0c419c664e721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdiv__t" kindref="compound">div_t</ref></type>
        <definition>div_t div</definition>
        <argsstring>(int, int)</argsstring>
        <name>div</name>
        <param>
          <type>int</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Computes the quotient and remainder of an integer division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numer</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denom</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A structure of type <ref refid="structdiv__t" kindref="compound">div_t</ref>, comprising both the quotient and the remainder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="145" column="14" bodyfile="lib/libc/stdlib/div.c" bodystart="71" bodyend="95" declfile="include/stdlib.h" declline="145" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga6f255d924f7a6bb2c4be0c8c2f2d9ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void exit</definition>
        <argsstring>(int)</argsstring>
        <name>exit</name>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Terminates the calling process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Exit status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="146" column="13" bodyfile="lib/libc/stdlib/exit.c" bodystart="40" bodyend="53" declfile="include/stdlib.h" declline="146" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaf07d89f5ceaea0c7c8252cc41fd75f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free</definition>
        <argsstring>(void *)</argsstring>
        <name>free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Frees allocated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory area to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="147" column="13" bodyfile="lib/libc/stdlib/malloc.c" bodystart="62" bodyend="100" declfile="include/stdlib.h" declline="147" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga872ac3564834aa0ba70a9e1bd3c2f9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* getenv</definition>
        <argsstring>(const char *)</argsstring>
        <name>getenv</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Gets value of an environment variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a string containing the value for the specified name, upon successful completion. If the specified name cannot be found in the environment of the calling process, a null pointer is returned instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="148" column="13" bodyfile="lib/libc/stdlib/getenv.c" bodystart="111" bodyend="116" declfile="include/stdlib.h" declline="148" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gacef82b884418ad50ae51cadb8eb35069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long labs</definition>
        <argsstring>(long)</argsstring>
        <name>labs</name>
        <param>
          <type>long</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns a long integer absolute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of the long integer operand. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="149" column="13" bodyfile="lib/libc/stdlib/labs.c" bodystart="33" bodyend="36" declfile="include/stdlib.h" declline="149" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga9961db60c90864f8b8497073dd749d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structldiv__t" kindref="compound">ldiv_t</ref></type>
        <definition>ldiv_t ldiv</definition>
        <argsstring>(long, long)</argsstring>
        <name>ldiv</name>
        <param>
          <type>long</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>long</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Computes quotient and remainder of a long division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numer</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denom</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A structure of type <ref refid="structldiv__t" kindref="compound">ldiv_t</ref>, comprising both the quotient and the remainder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="150" column="15" bodyfile="lib/libc/stdlib/ldiv.c" bodystart="71" bodyend="95" declfile="include/stdlib.h" declline="150" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaed06afcfed16ae2e80a211efddbb7081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long llabs</definition>
        <argsstring>(long long)</argsstring>
        <name>llabs</name>
        <param>
          <type>long long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="151" column="18" declfile="include/stdlib.h" declline="151" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga1b9b0a37de5270109f0393520d75b30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlldiv__t" kindref="compound">lldiv_t</ref></type>
        <definition>lldiv_t lldiv</definition>
        <argsstring>(long long, long long)</argsstring>
        <name>lldiv</name>
        <param>
          <type>long long</type>
        </param>
        <param>
          <type>long long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="152" column="16" declfile="include/stdlib.h" declline="152" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga1c8580582aae58105f16108d4ec89e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* malloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>malloc</name>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion with size not equal to 0, <ref refid="group__stdlib_1ga1c8580582aae58105f16108d4ec89e9a" kindref="member">malloc()</ref> returns a pointer to the allocated space. If size is 0, either a null pointer or a unique pointer that can be successfully passed to <ref refid="group__stdlib_1gaf07d89f5ceaea0c7c8252cc41fd75f37" kindref="member">free()</ref> is returned. Otherwise, it returns a null pointer and set errno to indicate the error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="153" column="13" bodyfile="lib/libc/stdlib/malloc.c" bodystart="142" bodyend="194" declfile="include/stdlib.h" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gae650100e5bb658ce0ed1e25349f63123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mblen</definition>
        <argsstring>(const char *, size_t)</argsstring>
        <name>mblen</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Gets number of bytes in a character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-byte character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to consider.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If s is a null pointer, <ref refid="group__stdlib_1gae650100e5bb658ce0ed1e25349f63123" kindref="member">mblen()</ref> returns a non-zero or 0 value, if character encodings, respectively, do or do not have state-dependent encodings. If s is not a null pointer, <ref refid="group__stdlib_1gae650100e5bb658ce0ed1e25349f63123" kindref="member">mblen()</ref> either returns 0 (if s points to the null byte), or returns the number of bytes that constitute the character (if the next n or fewer bytes form a valid character), or return -1 (if they do not form a valid character) and is set errno to indicate the error. In no case shall the value returned be greater than <computeroutput>n</computeroutput> or the value of the MB_CUR_MAX macro.</para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="group__stdlib_1gae650100e5bb658ce0ed1e25349f63123" kindref="member">mblen()</ref> function is not thread-safe. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="154" column="12" bodyfile="lib/libc/stdlib/mblen.c" bodystart="66" bodyend="69" declfile="include/stdlib.h" declline="154" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga918c5f7675fba519c224b1e4c5e20a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        <definition>size_t mbstowcs</definition>
        <argsstring>(wchar_t *restrict, const char *restrict, size_t)</argsstring>
        <name>mbstowcs</name>
        <param>
          <type><ref refid="decl_8h_1a2e9a8173645cde5c5e7ae1eaa41d27ce" kindref="member">wchar_t</ref> *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="155" column="15" declfile="include/stdlib.h" declline="155" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga518b2677fda26df5c9c9eb31b2edee67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbtowc</definition>
        <argsstring>(wchar_t *restrict, const char *restrict, size_t)</argsstring>
        <name>mbtowc</name>
        <param>
          <type><ref refid="decl_8h_1a2e9a8173645cde5c5e7ae1eaa41d27ce" kindref="member">wchar_t</ref> *</type>
          <declname>restrict</declname>
          <defname>pwc</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Converts a character to a wide-character code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pwc</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide-character code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide-character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to consider.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If <computeroutput>s</computeroutput> is a null pointer, <ref refid="group__stdlib_1ga518b2677fda26df5c9c9eb31b2edee67" kindref="member">mbtowc()</ref> returns a non-zero or 0 value, if character encodings, respectively, do or do not have state- dependent encodings. If <computeroutput>s</computeroutput> is not a null pointer, <ref refid="group__stdlib_1ga518b2677fda26df5c9c9eb31b2edee67" kindref="member">mbtowc()</ref> either returns 0 (if s points to the null byte), or returns the number of bytes that constitute the converted character (if the next <computeroutput>n</computeroutput> or fewer bytes form a valid character), or return -1 and sets errno to indicate the error (if they do not form a valid character).</para>
</simplesect>
In no case the value returned is greater than <computeroutput>n</computeroutput> or the value of the MB_CUR_MAX macro.</para>
<para><simplesect kind="note"><para>The <ref refid="group__stdlib_1ga518b2677fda26df5c9c9eb31b2edee67" kindref="member">mbtowc()</ref> function is not thread-safe. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="156" column="12" bodyfile="lib/libc/stdlib/mbtowc.c" bodystart="179" bodyend="204" declfile="include/stdlib.h" declline="156" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga618b2e4bc5184f2de3c58eb3adc840ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void qsort</definition>
        <argsstring>(void *, size_t, size_t, int(*)(const void *, const void *))</argsstring>
        <name>qsort</name>
        <param>
          <type>void *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
<para>Sorts a table of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to sort. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="157" column="13" bodyfile="lib/libc/stdlib/qsort.c" bodystart="176" bodyend="180" declfile="include/stdlib.h" declline="157" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gae23144bcbb8e3742b00eb687c36654d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rand</definition>
        <argsstring>(void)</argsstring>
        <name>rand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Generates a pseudo-random number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pseudo-random integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="159" column="12" bodyfile="lib/libc/stdlib/rand.c" bodystart="66" bodyend="70" declfile="include/stdlib.h" declline="159" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gafa148085b6fa9594b4c35e100d94a183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* realloc</definition>
        <argsstring>(void *, size_t)</argsstring>
        <name>realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reallocates a memory chunk. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to old object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of new object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion, <ref refid="group__stdlib_1gafa148085b6fa9594b4c35e100d94a183" kindref="member">realloc()</ref> returns a pointer to the allocated space. Upon failure, a null pointer is returned instead.</para>
</simplesect>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Check if we can simply expand. </para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to old object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of new object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion, <ref refid="group__stdlib_1gafa148085b6fa9594b4c35e100d94a183" kindref="member">realloc()</ref> returns a pointer to the allocated space. Upon failure, a null pointer is returned instead.</para>
</simplesect>
<xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>Check if we can simply expand. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="160" column="13" bodyfile="lib/libc/stdlib/malloc.c" bodystart="207" bodyend="225" declfile="include/stdlib.h" declline="160" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaa7cb61cef6d19542fccc5cabf47f96eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srand</definition>
        <argsstring>(unsigned)</argsstring>
        <name>srand</name>
        <param>
          <type>unsigned</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Sets seed value for pseudo-random number generator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Pseudo-random number sequence&apos;s seed value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="161" column="13" bodyfile="lib/libc/stdlib/srand.c" bodystart="38" bodyend="41" declfile="include/stdlib.h" declline="161" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gac102953e1ec969337c2d582187ef07e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double strtod</definition>
        <argsstring>(const char *restrict, char **restrict)</argsstring>
        <name>strtod</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="162" column="15" declfile="include/stdlib.h" declline="162" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga3e1083408e0b6388f704d62dc069c610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float strtof</definition>
        <argsstring>(const char *restrict, char **restrict)</argsstring>
        <name>strtof</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="163" column="14" declfile="include/stdlib.h" declline="163" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga9bc81db43ac86489fd4f63158d980824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long strtol</definition>
        <argsstring>(const char *restrict, char **restrict, int)</argsstring>
        <name>strtol</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="164" column="13" bodyfile="lib/libc/stdlib/strtol.c" bodystart="64" bodyend="138" declfile="include/stdlib.h" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga339e1394ba4c3667b97e99e74f12e500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double strtold</definition>
        <argsstring>(const char *restrict, char **restrict)</argsstring>
        <name>strtold</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="165" column="20" declfile="include/stdlib.h" declline="165" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gab244d29d4085d656a6b53979a0011f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long strtoll</definition>
        <argsstring>(const char *restrict, char **restrict, int)</argsstring>
        <name>strtoll</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
          <defname>nptr</defname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
          <defname>endptr</defname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Converts a string to a long long integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endptr</parametername>
</parameternamelist>
<parameterdescription>
<para>End of string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="166" column="18" bodyfile="lib/libc/stdlib/strtoll.c" bodystart="71" bodyend="184" declfile="include/stdlib.h" declline="166" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gae938461579a7c8e38d1c02319b8e9e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long strtoul</definition>
        <argsstring>(const char *restrict, char **restrict, int)</argsstring>
        <name>strtoul</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
          <defname>str</defname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
          <defname>endptr</defname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Converts a string to an unsigned long. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endptr</parametername>
</parameternamelist>
<parameterdescription>
<para>End of string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="167" column="22" bodyfile="lib/libc/stdlib/strtoul.c" bodystart="67" bodyend="121" declfile="include/stdlib.h" declline="167" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga0ff125753c962cfc9f053ba56eaf7e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long strtoull</definition>
        <argsstring>(const char *restrict, char **restrict, int)</argsstring>
        <name>strtoull</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
          <defname>str</defname>
        </param>
        <param>
          <type>char **</type>
          <declname>restrict</declname>
          <defname>endptr</defname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Converts a string to an unsigned long long. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endptr</parametername>
</parameternamelist>
<parameterdescription>
<para>End of string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="168" column="27" bodyfile="lib/libc/stdlib/strtoull.c" bodystart="75" bodyend="141" declfile="include/stdlib.h" declline="168" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gacc83831a3c113aad520e966b931821b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int system</definition>
        <argsstring>(const char *)</argsstring>
        <name>system</name>
        <param>
          <type>const char *</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Issues a command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to issue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If <computeroutput>command</computeroutput> is a null pointer, non-zero value is returned to indicate that a command processor is available, and zero otherwise.</para>
</simplesect>
If <computeroutput>command</computeroutput> is not a null pointer, the termination status of the command language is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="169" column="12" bodyfile="lib/libc/stdlib/system.c" bodystart="44" bodyend="80" declfile="include/stdlib.h" declline="169" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga4ba2dbe4531f620c4a913e15d97a6d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        <definition>size_t wcstombs</definition>
        <argsstring>(char *restrict, const wchar_t *restrict, size_t)</argsstring>
        <name>wcstombs</name>
        <param>
          <type>char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>const <ref refid="decl_8h_1a2e9a8173645cde5c5e7ae1eaa41d27ce" kindref="member">wchar_t</ref> *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="170" column="15" declfile="include/stdlib.h" declline="170" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga0eb3389011d8b4ed673f8d1676418f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wctomb</definition>
        <argsstring>(char *, wchar_t)</argsstring>
        <name>wctomb</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="decl_8h_1a2e9a8173645cde5c5e7ae1eaa41d27ce" kindref="member">wchar_t</ref></type>
          <declname>wchar</declname>
        </param>
        <briefdescription>
<para>Cconverts a wide-character code to a character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Store location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wchar</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide-character to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If <computeroutput>s</computeroutput> is a null pointer,a non-zero or 0 value is returns, if character encodings, respectively, do or do not have state-dependent encodings. If <computeroutput>s</computeroutput> is not a null pointer, -1 is returned if the value of <computeroutput>wchar</computeroutput> does not correspond to a valid character, or return the number of bytes that constitute the character corresponding to the value of <computeroutput>wchar</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="171" column="12" bodyfile="lib/libc/stdlib/wctomb.c" bodystart="62" bodyend="71" declfile="include/stdlib.h" declline="171" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaa32a5138e3954193c9d94c04b64f8aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getsubopt</definition>
        <argsstring>(char **, char *const *, char **)</argsstring>
        <name>getsubopt</name>
        <param>
          <type>char **</type>
          <declname>optionp</declname>
        </param>
        <param>
          <type>char *const *</type>
          <declname>keylistp</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>valuep</declname>
        </param>
        <briefdescription>
<para>Parses suboption arguments from a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keylistp</parametername>
</parameternamelist>
<parameterdescription>
<para>List of strings to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valuep</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of a value string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the matched token string, or -1 if no token strings were matched. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="176" column="12" bodyfile="lib/libc/stdlib/getsubopt.c" bodystart="58" bodyend="106" declfile="include/stdlib.h" declline="176" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gabb3eced7b06b90081d273ce3ed0890cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mkdtemp</definition>
        <argsstring>(char *)</argsstring>
        <name>mkdtemp</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="177" column="13" declfile="include/stdlib.h" declline="177" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga567fc2c0116424fbecf9238ecf7c5fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mkstemp</definition>
        <argsstring>(char *)</argsstring>
        <name>mkstemp</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="178" column="12" declfile="include/stdlib.h" declline="178" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga16835a2f0889fd0fece3f7a779ae53a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int posix_memalign</definition>
        <argsstring>(void **, size_t, size_t)</argsstring>
        <name>posix_memalign</name>
        <param>
          <type>void **</type>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="179" column="12" declfile="include/stdlib.h" declline="179" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga1e1d87736ecb144de4859f00bdb6f8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rand_r</definition>
        <argsstring>(unsigned *)</argsstring>
        <name>rand_r</name>
        <param>
          <type>unsigned *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="180" column="12" declfile="include/stdlib.h" declline="180" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga4f163149d0e7590ff98d7c8bbd17583d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int setenv</definition>
        <argsstring>(const char *, const char *, int)</argsstring>
        <name>setenv</name>
        <param>
          <type>const char *</type>
          <declname>envname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>envval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>overwrite</declname>
        </param>
        <briefdescription>
<para>Adds or change environment variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>envname</parametername>
</parameternamelist>
<parameterdescription>
<para>Environment variable name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>envval</parametername>
</parameternamelist>
<parameterdescription>
<para>Environment variable value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite environment variable?</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion, zero is returned. Otherwise, -1 is returned, errno set to indicate the error, and the environment is unchanged.</para>
</simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>The <ref refid="group__stdlib_1ga4f163149d0e7590ff98d7c8bbd17583d" kindref="member">setenv()</ref> function shall fail if the envname argument points to an empty string or points to a string containing an &apos;=&apos; character. </para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>envname</parametername>
</parameternamelist>
<parameterdescription>
<para>Environment variable name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>envval</parametername>
</parameternamelist>
<parameterdescription>
<para>Environment variable value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite environment variable?</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upon successful completion, zero is returned. Otherwise, -1 is returned, errno set to indicate the error, and the environment is unchanged.</para>
</simplesect>
<xrefsect id="todo_1_todo000011"><xreftitle>Todo</xreftitle><xrefdescription><para>The <ref refid="group__stdlib_1ga4f163149d0e7590ff98d7c8bbd17583d" kindref="member">setenv()</ref> function shall fail if the envname argument points to an empty string or points to a string containing an &apos;=&apos; character. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="181" column="12" bodyfile="lib/libc/stdlib/setenv.c" bodystart="74" bodyend="151" declfile="include/stdlib.h" declline="181" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga4f1e5944541aa8d1b18932a54158eb70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unsetenv</definition>
        <argsstring>(const char *)</argsstring>
        <name>unsetenv</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="182" column="12" declfile="include/stdlib.h" declline="182" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga4f3f099a09a8b63257b3ef4e9954e848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long a64l</definition>
        <argsstring>(const char *)</argsstring>
        <name>a64l</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="189" column="13" declfile="include/stdlib.h" declline="189" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaf9329f9acef07ca14ea2256191c3ce74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double drand48</definition>
        <argsstring>(void)</argsstring>
        <name>drand48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="190" column="15" declfile="include/stdlib.h" declline="190" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga60bc85574844ec3b1cc6b8ef9cdff5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double erand48</definition>
        <argsstring>(unsigned short[3])</argsstring>
        <name>erand48</name>
        <param>
          <type>unsigned short</type>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="191" column="15" declfile="include/stdlib.h" declline="191" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gae09b28c5490741231182c52028a23165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int grantpt</definition>
        <argsstring>(int)</argsstring>
        <name>grantpt</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="192" column="12" declfile="include/stdlib.h" declline="192" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga558757ae2721914acef051b48ef85e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* initstate</definition>
        <argsstring>(unsigned, char *, size_t)</argsstring>
        <name>initstate</name>
        <param>
          <type>unsigned</type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type><ref refid="decl_8h_1a028b7cbca0d37bbc9bc219370525227f" kindref="member">size_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="193" column="13" declfile="include/stdlib.h" declline="193" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gafa05fdd1def4b6d226ff64c7976f529f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long jrand48</definition>
        <argsstring>(unsigned short[3])</argsstring>
        <name>jrand48</name>
        <param>
          <type>unsigned short</type>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="194" column="13" declfile="include/stdlib.h" declline="194" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga63da730951c715309c5df7b821d49c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* l64a</definition>
        <argsstring>(long)</argsstring>
        <name>l64a</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="195" column="13" declfile="include/stdlib.h" declline="195" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaca17a192a51dd5ae17845615a45f3218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lcong48</definition>
        <argsstring>(unsigned short[7])</argsstring>
        <name>lcong48</name>
        <param>
          <type>unsigned short</type>
          <array>[7]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="196" column="13" declfile="include/stdlib.h" declline="196" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaf728ead9279a6966bb00e16bb9844971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long lrand48</definition>
        <argsstring>(void)</argsstring>
        <name>lrand48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="197" column="13" declfile="include/stdlib.h" declline="197" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga9c450a7a3d4437e3d5f8def180f68103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long mrand48</definition>
        <argsstring>(void)</argsstring>
        <name>mrand48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="198" column="13" declfile="include/stdlib.h" declline="198" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaa5748234e4efec642d65dce6310596d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long nrand48</definition>
        <argsstring>(unsigned short[3])</argsstring>
        <name>nrand48</name>
        <param>
          <type>unsigned short</type>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="199" column="13" declfile="include/stdlib.h" declline="199" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gad0def01a79709ac43eb62ad48f4cf409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int posix_openpt</definition>
        <argsstring>(int)</argsstring>
        <name>posix_openpt</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="200" column="12" declfile="include/stdlib.h" declline="200" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga7eaf7a36ed5eff48d83827444d860cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ptsname</definition>
        <argsstring>(int)</argsstring>
        <name>ptsname</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="201" column="13" declfile="include/stdlib.h" declline="201" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga5dd0c329b734eeefd1909d15385f8b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int putenv</definition>
        <argsstring>(char *)</argsstring>
        <name>putenv</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="202" column="12" declfile="include/stdlib.h" declline="202" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga114aeb1751119382aaf3340355b22cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long random</definition>
        <argsstring>(void)</argsstring>
        <name>random</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="203" column="13" declfile="include/stdlib.h" declline="203" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gaa2e947ddd3b3def026b2fe85509db1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* realpath</definition>
        <argsstring>(const char *restrict, char *restrict)</argsstring>
        <name>realpath</name>
        <param>
          <type>const char *</type>
          <declname>restrict</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="204" column="13" declfile="include/stdlib.h" declline="204" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga0b86f7fc9964c291844e8112a367721c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short *</type>
        <definition>unsigned short* seed48</definition>
        <argsstring>(unsigned short[3])</argsstring>
        <name>seed48</name>
        <param>
          <type>unsigned short</type>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="205" column="23" declfile="include/stdlib.h" declline="205" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1gae25be82cf3e215cbb7493afee84d8e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setkey</definition>
        <argsstring>(const char *)</argsstring>
        <name>setkey</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="206" column="13" declfile="include/stdlib.h" declline="206" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga906bfa1c5e19ac1c32949196e92e39e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* setstate</definition>
        <argsstring>(char *)</argsstring>
        <name>setstate</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="207" column="13" declfile="include/stdlib.h" declline="207" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga00f00795b1045ba8a8eba4cb8ac25366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srand48</definition>
        <argsstring>(long)</argsstring>
        <name>srand48</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="208" column="13" declfile="include/stdlib.h" declline="208" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga1b5213526e729a67240badfd8408a447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srandom</definition>
        <argsstring>(unsigned)</argsstring>
        <name>srandom</name>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="209" column="13" declfile="include/stdlib.h" declline="209" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__stdlib_1ga47e0e6d6e941f2fb6508395ae84bc2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unlockpt</definition>
        <argsstring>(int)</argsstring>
        <name>unlockpt</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="210" column="12" declfile="include/stdlib.h" declline="210" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Standard library definitions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright(C)<sp/>2011-2016<sp/>Pedro<sp/>H.<sp/>Penna<sp/>&lt;pedrohenriquepenna@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Nanvix.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Nanvix<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>Nanvix.<sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STDLIB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STDLIB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_POSIX_C_SOURCE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="stddef_8h" kindref="compound">stddef.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="math_8h" kindref="compound">math.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>EXIT_FAILURE<sp/>1<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>EXIT_SUCCESS<sp/>0<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>RAND_MAX<sp/>0x7fffffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MB_CUR_MAX<sp/>((size_t)<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_NEED_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="decl_8h" kindref="compound">decl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="structdiv__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quot;<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rem;<sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structdiv__t" kindref="compound">div_t</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113" refid="structldiv__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quot;<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rem;<sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structldiv__t" kindref="compound">ldiv_t</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122" refid="structlldiv__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quot;<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rem;<sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structlldiv__t" kindref="compound">lldiv_t</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_NEED_SIZE_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_NEED_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_NEED_WSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="decl_8h" kindref="compound">decl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Forward<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gacf4a2778f9a4d5e0bf2d32c5cde485a4" kindref="member">_Exit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga8dec7c95227ff149687066cf04029191" kindref="member">abort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga2503bc813e76c9ff8b3523db10bdc06e" kindref="member">abs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga7cb771250232f7f27f31079208f4428a" kindref="member">atexit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga4e157d18591ba54c92e4da99a3d1ccae" kindref="member">atoi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gabcc2e53ab0b26e5bbf55d597af030327" kindref="member">atol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga4a184533926b5b5e4e595f52919df116" kindref="member">atoll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__stdlib_1ga49a76993c8406bc5a389dfabb8089bd1" kindref="member">bsearch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__stdlib_1ga77e880b1033d5a912be4333fc5d31eef" kindref="member">calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structdiv__t" kindref="compound">div_t</ref><sp/><ref refid="group__stdlib_1gad17e77a41f50034681a0c419c664e721" kindref="member">div</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga6f255d924f7a6bb2c4be0c8c2f2d9ce3" kindref="member">exit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gaf07d89f5ceaea0c7c8252cc41fd75f37" kindref="member">free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__stdlib_1ga872ac3564834aa0ba70a9e1bd3c2f9de" kindref="member">getenv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gacef82b884418ad50ae51cadb8eb35069" kindref="member">labs</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structldiv__t" kindref="compound">ldiv_t</ref><sp/><ref refid="group__stdlib_1ga9961db60c90864f8b8497073dd749d83" kindref="member">ldiv</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>llabs(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structlldiv__t" kindref="compound">lldiv_t</ref><sp/>lldiv(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__stdlib_1ga1c8580582aae58105f16108d4ec89e9a" kindref="member">malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gae650100e5bb658ce0ed1e25349f63123" kindref="member">mblen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mbstowcs(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga518b2677fda26df5c9c9eb31b2edee67" kindref="member">mbtowc</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga618b2e4bc5184f2de3c58eb3adc840ad" kindref="member">qsort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gae23144bcbb8e3742b00eb687c36654d1" kindref="member">rand</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__stdlib_1gafa148085b6fa9594b4c35e100d94a183" kindref="member">realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gaa7cb61cef6d19542fccc5cabf47f96eb" kindref="member">srand</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>strtod(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>strtof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>strtol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>strtold(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gab244d29d4085d656a6b53979a0011f49" kindref="member">strtoll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gae938461579a7c8e38d1c02319b8e9e3e" kindref="member">strtoul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga0ff125753c962cfc9f053ba56eaf7e73" kindref="member">strtoull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**restrict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gacc83831a3c113aad520e966b931821b4" kindref="member">system</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wcstombs(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga0eb3389011d8b4ed673f8d1676418f12" kindref="member">wctomb</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_POSIX_C_SOURCE)<sp/>||<sp/>defined(_XOPEN_SOURCE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Forward<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1gaa32a5138e3954193c9d94c04b64f8aa8" kindref="member">getsubopt</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mkdtemp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mkstemp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posix_memalign(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand_r(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stdlib_1ga4f163149d0e7590ff98d7c8bbd17583d" kindref="member">setenv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unsetenv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_XOPEN_SOURCE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Forward<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a64l(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>drand48(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>erand48(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>[3]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grantpt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*initstate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>jrand48(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>[3]);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*l64a(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lcong48(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>[7]);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lrand48(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mrand48(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nrand48(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>[3]);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posix_openpt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptsname(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>putenv(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>random(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*realpath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*restrict);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*seed48(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>[3]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setkey(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*setstate(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srand48(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>srandom(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unlockpt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STDLIB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/stdlib.h"/>
  </compounddef>
</doxygen>
